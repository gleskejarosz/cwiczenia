CREATE DATABASE leetcode2;

USE leetcode2;

/*
1757
*/

CREATE TABLE products(
    product_id INT,
    low_fats ENUM("Y", "N"),
    recyclable ENUM("Y", "N")
);

INSERT INTO products VALUES (0, "Y","N"),
(1, "Y","Y"),
(2, "N","Y"),
(3, "Y","Y"),
(4, "N","N");

SELECT product_id
FROM products
WHERE low_fats="Y" and recyclable="Y";

/*
584
*/

CREATE TABLE customer(
    id INT,
    name VARCHAR(64),
    referee_id INT,
    PRIMARY KEY(id)
);

 INSERT INTO customer VALUES (1, "Will", null),
 (2, "Jane", null),
 (3, "Alex", 2),
 (4, "Bill", null),
 (5, "Zack", 1),
 (6, "Mark", 2);

SELECT name
FROM customer
WHERE referee_id <> 2 OR referee_id IS NULL;

/*
595
*/

CREATE TABLE world(
    name VARCHAR(64),
    PRIMARY KEY(name),
    continent VARCHAR(64),
    area INT,
    population INT,
    gdp BIGINT
);

INSERT INTO world VALUES ("Afghanistan", "Asia", 652230, 25500100, 20343000000),
("Albania", "Europe", 28748, 2831741, 12960000000),
("Algeria", "Africa", 2381741, 37100000, 188681000000),
("Andorra", "Europe", 468, 78115, 3712000000),
("Angola", "Africa", 1246700, 20609294, 100990000000);

SELECT name, population, area
FROM world
WHERE area >= 3000000 OR population >= 25000000;

/*
1148
*/

CREATE TABLE views(
    article_id INT,
    author_id INT,
    viewer_id INT,
    view_date DATE
);

INSERT INTO views VALUES (1, 3, 5, "2019-08-01"),
(1, 3, 6, "2019-08-02"),
(2, 7, 7, "2019-08-01"),
(2, 7, 6, " 2019-08-02"),
(4, 7, 1, "2019-07-22"),
(3, 4, 4, "2019-07-21"),
(3, 4, 4, "2019-07-21");

SELECT author_id AS id
FROM views
WHERE author_id=viewer_id
GROUP BY author_id
ORDER BY id;

/*
1683
*/

CREATE TABLE tweets(
    tweet_id INT,
    PRIMARY KEY(tweet_id),
    content VARCHAR(64)
);

INSERT INTO tweets VALUES (1, "Vote for Biden"),
(2, "Let us make America great again!");

SELECT tweet_id
FROM tweets
WHERE LENGTH(content) > 15;

/*
1378
*/

CREATE TABLE employees(
    id INT,
    PRIMARY KEY(id),
    name VARCHAR(64)
);

CREATE TABLE employeeuni(
    id INT,
    unique_id INT
);

INSERT INTO employees VALUES (1, "Alice"),
(7, "Bob"),
(11, "Meir"),
(90, "Winston"),
(3, "Jonathan");

INSERT INTO employeeuni VALUES (3, 1),
(11, 2),
(90, 3);

SELECT
    employeeuni.unique_id,
    employees.name
FROM employees
LEFT JOIN employeeuni ON employees.id = employeeuni.id;

/*
1068
*/

CREATE TABLE product(
    product_id INT,
    product_name VARCHAR(64),
    PRIMARY KEY(product_id)
);

CREATE TABLE sales(
    sale_id INT,
    product_id INT,
    year INT,
    quantity INT,
    price INT,
    PRIMARY KEY(sale_id, year),
    FOREIGN KEY (product_id) REFERENCES product(product_id)
);

INSERT INTO product VALUES (100, "Nokia"),
(200, "Apple"),
(300, "Samsung");

INSERT INTO sales VALUES (1, 100, 2008, 10, 5000),
(2, 100, 2009, 12, 5000),
(7, 200, 2011, 15, 9000);

SELECT
    product.product_name,
    sales.year,
    sales.price
FROM sales
JOIN product ON product.product_id = sales.product_id;

/*
1581
*/

CREATE TABLE visits (
    visit_id INT,
    customer_id INT,
    PRIMARY KEY(visit_id)
);

CREATE TABLE transactions (
    transaction_id INT,
    visit_id INT,
    amount INT,
    PRIMARY KEY(transaction_id)
);

INSERT INTO visits VALUES (1, 23),
(2, 9),
(4, 30),
(5, 54),
(6, 96),
(7, 54),
(8, 54);

INSERT INTO transactions VALUES (2, 5, 310),
(3, 5, 300),
(9, 5, 200),
(12, 1, 910),
(13, 2, 970);

SELECT
    t1.customer_id,
    COUNT(t1.customer_id) AS count_no_trans
FROM visits t1
LEFT JOIN transactions t2
ON t1.visit_id = t2.visit_id
WHERE t2.transaction_id IS NULL
GROUP BY t1.customer_id;

/*
197
*/

CREATE TABLE weather(
    id INT,
    recordDate DATE,
    temperature INT,
    PRIMARY KEY(id)
);

INSERT INTO weather VALUES (1, "2015-01-01", 10),
(2, "2015-01-02", 25),
(3, "2015-01-03", 20),
(4, "2015-01-04", 30);

SELECT aura2.id
FROM Weather aura1
JOIN Weather aura2
ON aura2.recordDate=DATE_ADD(aura1.recordDate, interval 1 day)
WHERE aura2.temperature > aura1.temperature;

/*
1661
*/

CREATE TABLE activity (
     machine_id INT,
     process_id INT,
     activity_type ENUM("start", "end"),
     timestamp FLOAT,
     PRIMARY KEY(machine_id, process_id, activity_type)
);

INSERT INTO activity VALUES(0, 0, "start", 0.712),
(0, 0, "end", 1.520),
(0, 1, "start", 3.140),
(0, 1, "end", 4.120),
(1, 0, "start", 0.550),
(1, 0, "end", 1.550),
(1, 1, "start", 0.430),
(1, 1, "end", 1.420),
(2, 0, "start", 4.100),
(2, 0, "end", 4.512),
(2, 1, "start", 2.500),
(2, 1, "end", 5.000);

SELECT
    machine_id,
    processing_time
FROM activity;


SELECT
    A1.machine_id,
    ROUND(AVG(A2.timestamp - A1.timestamp), 3) as processing_time
FROM activity A1
JOIN activity A2 ON A2.machine_id = A1.machine_id
WHERE A1.activity_type = 'start' AND A2.activity_type = 'end'
GROUP BY A2.machine_id;

/*
577
*/

CREATE TABLE employee(
    empId INT,
    name VARCHAR(64),
    supervisor INT,
    salary INT,
    PRIMARY KEY(empId)
);

CREATE TABLE bonus(
    empId INT,
    bonus INT,
    FOREIGN KEY(empId) REFERENCES employee(empId)
);

INSERT INTO employee VALUES (3, "Brad", null, 4000),
(1, "John", 3, 1000),
(2, "Dan", 3, 2000),
(4, "Thomas", 3, 4000);

INSERT INTO bonus VALUES(2, 500),
(4, 2000);

SELECT
    e1.name,
    b1.bonus
FROM employee e1
LEFT JOIN bonus b1 ON e1.empId = b1.empId
WHERE b1.bonus < 1000 OR b1.bonus IS NULL;

/*
1280
*/

CREATE TABLE students(
    student_id INT,
    student_name VARCHAR(64),
    PRIMARY KEY(student_id)
);

CREATE TABLE subjects(
    subject_name VARCHAR(64),
    PRIMARY KEY(subject_name)
);

CREATE TABLE examinations(
    student_id INT,
    subject_name VARCHAR(64)
);

INSERT INTO students VALUES (1, "Alice"),
(2, "Bob"),
(13, "John"),
(6, "Alex");

INSERT INTO subjects VALUES("Math"),
("Physics"),
("Programming");

INSERT INTO examinations VALUES (1, "Math"),
(1, "Physics"),
(1, "Programming"),
(2, "Programming"),
(1, "Physics"),
(1, "Math"),
(13, "Math"),
(13, "Programming"),
(13, "Physics"),
(2, "Math"),
(1, "Math");

SELECT
    s.student_id,
    s.student_name,
    n.subject_name,
    COUNT(e.student_id) AS attended_exams
FROM students s
CROSS JOIN subjects n
LEFT JOIN examinations e
ON s.student_id = e.student_id AND n.subject_name = e.subject_name
GROUP BY s.student_id, s.student_name, n.subject_name
ORDER BY s.student_id, n.subject_name;

/*
570
*/

CREATE TABLE employee1(
    id INT,
    name VARCHAR(64),
    department VARCHAR(64),
    managerId INT,
    PRIMARY KEY(id)
);

INSERT INTO employee1 VALUES (101, "John", "A", 0),
(102, "Dan", "A", 101),
(103, "James", "A", 101),
(104, "Amy", "A", 101),
(105, "Anne", "A", 101),
(106, "Ron", "B", 101);

SELECT name
FROM employee1
WHERE id IN
    (SELECT managerId
    FROM employee1
    GROUP BY managerId
    HAVING count(*) >= 5);

/*
1934
*/

CREATE TABLE signups(
    user_id INT,
    time_stamp DATETIME,
    PRIMARY KEY(user_id)
);

CREATE TABLE confirmations(
    user_id INT,
    time_stamp DATETIME,
    action ENUM('confirmed', 'timeout'),
    PRIMARY KEY(user_id, time_stamp),
    FOREIGN KEY(user_id) REFERENCES singnups(user_id)
);

INSERT INTO signups VALUES (3, "2020-03-21 10:16:13"),
(7, "2020-01-04 13:57:59"),
(2, "2020-07-29 23:09:44"),
(6, "2020-12-09 10:39:37");

INSERT INTO confirmations VALUES (3, "2021-01-06 03:30:46", "timeout"),
(3, "2021-07-14 14:00:00", "timeout"),
(7, "2021-06-12 11:57:29", "confirmed"),
(7, "2021-06-13 12:58:28", "confirmed"),
(7, "2021-06-14 13:59:27", "confirmed"),
(2, "2021-01-22 00:00:00", "confirmed"),
(2, "2021-02-28 23:59:59", "timeout");

SELECT
    s.user_id,
    ROUND(IFNULL(
    (SELECT
    count(user_id)
    FROM confirmations c
    WHERE c.user_id = s.user_id AND c.action = "confirmed")
    /
    (SELECT
    count(user_id)
    FROM confirmations c
    WHERE c.user_id = s.user_id), 0), 2)
    AS confirmation_rate
FROM signups s
GROUP BY s.user_id;

/*
620
*/

CREATE TABLE cinema (
    id INT,
    movie VARCHAR(64),
    description VARCHAR(128),
    rating FLOAT,
    PRIMARY KEY(id)
);

INSERT INTO cinema VALUES (1, "War", "great 3D", 8.9),
(2, "Science", "fiction", 8.5),
(3, "irish", "boring", 6.2),
(4, "Ice song", "Fantacy", 8.6),
(5, "House card", "Interesting", 9.1);

SELECT * FROM cinema
WHERE description != "boring" AND id % 2 = 1
ORDER BY rating DESC;

/*
1251
*/

CREATE TABLE prices (
    product_id INT,
    start_date DATE,
    end_date DATE,
    price INT,
    PRIMARY KEY(product_id, start_date, end_date)
);

CREATE TABLE unitssold (
    product_id INT,
    purchase_date DATE,
    units INT
);

INSERT INTO prices VALUES (1, " 2019-02-17", "2019-02-28", 5),
(1, "2019-03-01", "2019-03-22", 20),
(2, "2019-02-01", "2019-02-20", 15),
(2, "2019-02-21", "2019-03-31", 30);

INSERT INTO unitssold VALUES (1, "2019-02-25", 100),
(1, "2019-03-01", 15),
(2, " 2019-02-10", 200),
(2, "2019-03-22", 30);


SELECT
    p.price * u.units AS average_price
FROM prices p
JOIN unitssold u
ON p.product_id = u.product_id
WHERE p.start_date <= u.purchase_date AND u.purchase_date <= p.end_date
;

SELECT DISTINCT
    p.product_id,
    round(sum(p.price * u.units) / sum(u.units), 2) AS average_price
FROM prices AS p
JOIN unitssold AS u
ON p.product_id  = u.product_id
WHERE u.purchase_date BETWEEN p.start_date AND p.end_date
GROUP BY p.product_id;

/*
1075
*/

CREATE TABLE employee2(
    employee_id INT,
    name VARCHAR(64),
    experience_years INT,
    PRIMARY KEY(employee_id)
);

CREATE TABLE project(
    project_id INT,
    employee_id INT,
    PRIMARY KEY(project_id, employee_id),
    FOREIGN KEY(employee_id) REFERENCES employee2(employee_id)
);

INSERT INTO employee2 VALUES (1, "Khaled", 3),
(2, "Ali", 2),
(3, "John", 1),
(4, "Doe", 2);

INSERT INTO project VALUES (1, 1),
(1, 2),
(1, 3),
(2, 1),
(2, 4);

SELECT DISTINCT
    p.project_id,
    round(avg(e.experience_years), 2) AS average_years
FROM project p
JOIN employee2 e
ON p.employee_id = e.employee_id
GROUP BY p.project_id;

/*
1633
*/

CREATE TABLE users(
    user_id INT,
    user_name VARCHAR(64),
    PRIMARY KEY(user_id)
);

CREATE TABLE register(
    contest_id INT,
    user_id INT,
    PRIMARY KEY(contest_id, user_id)
);

INSERT INTO users VALUES (6, "Alice"),
(2, "Bob"),
(7, "Alex");

INSERT INTO register VALUES (215, 6),
(209, 2),
(208, 2),
(210, 6),
(208, 6),
(209, 7),
(209, 6),
(215, 7),
(208, 7),
(210, 2),
(207, 2),
(210, 7);

SELECT DISTINCT
    r.contest_id,
    round(count(r.contest_id) / (SELECT COUNT( * ) FROM users) * 100 , 2) AS percentage
FROM register r
JOIN users u
ON r.user_id = u.user_id
GROUP BY r.contest_id
ORDER BY percentage DESC, r.contest_id ASC;

/*
1211
*/

CREATE TABLE queries (
    query_name VARCHAR(64),
    result VARCHAR(64),
    position INT,
    rating INT
);

INSERT INTO queries VALUES ("Dog", "Golden Retriever", 1, 5),
("Dog", "German Shepherd", 2, 5),
("Dog", "Mule", 200, 1),
("Cat", "Shirazi", 5, 2),
("Cat", "Siamese", 3, 3),
("Cat", "Sphynx", 7, 4);

SELECT DISTINCT
    q.query_name,
    round(sum(rating / position) / count(query_name), 2) AS quality,
    round((select count(query_name) FROM queries WHERE query_name = q.query_name and rating < 3) / count(query_name) * 100, 2) AS poor_query_percentage
FROM queries q
GROUP BY q.query_name;

/*
1193
*/

CREATE TABLE transactions1(
    id INT,
    country VARCHAR(64),
    state ENUM("approved", "declined"),
    amount INT,
    trans_date DATE,
    PRIMARY KEY(id)
);

INSERT INTO transactions1 VALUES (121, "US", "approved", 1000, "2018-12-18"),
(122, "US", "declined", 2000, "2018-12-19"),
(123, "US", "approved", 2000, "2019-01-01"),
(124, "DE", "approved", 2000, "2019-01-07");

SELECT
    DATE_FORMAT(trans_date, "%Y-%m") AS month,
    country,
    count(state) AS trans_count,
    sum(if(state = "approved", 1, 0)) AS approved_count,
    sum(amount) AS trans_total_amount,
    sum(if(state = "approved", 1, 0) * amount) AS approved_total_amount
FROM transactions1
GROUP BY DATE_FORMAT(trans_date, "%Y-%m"), country;

/*
1174
*/

CREATE TABLE delivery(
     delivery_id INT,
     customer_id INT,
     order_date DATE,
     customer_pref_delivery_date DATE,
     PRIMARY KEY(delivery_id)
);

INSERT INTO delivery VALUES (1, 1, "2019-08-01", "2019-08-02"),
(2, 2, "2019-08-02", "2019-08-02"),
(3, 1, "2019-08-11", "2019-08-12"),
(4, 3, "2019-08-24", "2019-08-24"),
(5, 3, "2019-08-21", "2019-08-22"),
(6, 2, "2019-08-11", "2019-08-13"),
(7, 4, "2019-08-09", "2019-08-09");

SELECT
    round(sum(if(order_date = customer_pref_delivery_date, 1, 0)) / count(delivery_id), 2) AS immediate_percentage
FROM delivery;

WITH
first_order AS (SELECT customer_id, min(order_date) AS first_order_date FROM delivery d1 GROUP BY customer_id)
SELECT
    round(count(*) / (SELECT count(DISTINCT customer_id) FROM delivery) * 100, 2) AS immediate_percentage
FROM first_order d1 INNER JOIN delivery d2
ON d2.customer_id = d1.customer_id AND d2.order_date = d1.first_order_date
WHERE d1.first_order_date = d2.customer_pref_delivery_date;

/*
550
*/

CREATE TABLE activity1 (
    player_id INT,
    device_id INT,
    event_date DATE,
    games_played INT,
    PRIMARY KEY(player_id, event_date)
);

INSERT INTO activity1 VALUES (1, 2, "2016-03-01", 5),
(1, 2, "2016-03-02", 6),
(2, 3, "2016-06-25", 1),
(3, 1, "2016-03-02", 0),
(3, 4, "2016-07-03", 5);

INSERT INTO activity1 VALUES (4, 5, "2016-08-01", 3),
(4, 2, "2016-08-02", 6);

SELECT
    ROUND(COUNT(*) / (SELECT COUNT(DISTINCT player_id) FROM activity1), 2) as fraction
FROM activity1
WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN
(SELECT player_id, MIN(event_date) FROM activity1 GROUP BY player_id);

/*
2356
*/

CREATE TABLE teacher(
    teacher_id INT,
    subject_id INT,
    dept_id INT,
    PRIMARY KEY(subject_id, dept_id)
);

INSERT INTO teacher VALUES (1, 2, 3),
(1, 2, 4),
(1, 3, 3),
(2, 1, 1),
(2, 2, 1),
(2, 3, 1),
(2, 4, 1);

SELECT
    teacher_id,
    count(DISTINCT subject_id) AS cnt
FROM teacher
GROUP BY teacher_id;

/*
1141
*/

CREATE TABLE activity2(
    user_id INT,
    session_id INT,
    activity_date DATE,
    activity_type ENUM('open_session', 'end_session', 'scroll_down', 'send_message')
);

INSERT INTO activity2 VALUES (1, 1, "2019-07-20", "open_session"),
(1, 1, "2019-07-20", "scroll_down"),
(1, 1, "2019-07-20", "end_session"),
(2, 4, "2019-07-20", "open_session"),
(2, 4, "2019-07-21", "send_message"),
(2, 4, "2019-07-21", "end_session"),
(3, 2, "2019-07-21", "open_session"),
(3, 2, "2019-07-21", "send_message"),
(3, 2, "2019-07-21", "end_session"),
(4, 3, "2019-06-25", "open_session"),
(4, 3, "2019-06-25", "end_session");

SELECT
activity_date AS day,
COUNT(DISTINCT user_id) AS active_users
FROM activity2
WHERE (activity_date BETWEEN '2019-06-28' AND '2019-07-28')
GROUP BY activity_date;

/*
1070
*/

CREATE TABLE product1(
    product_id INT,
    product_name VARCHAR(64),
    PRIMARY KEY(product_id)
);

CREATE TABLE sales1(
    sale_id INT,
    product_id INT,
    year INT,
    quantity INT,
    price INT,
    PRIMARY KEY(sale_id, year),
    FOREIGN KEY(product_id) REFERENCES product1(product_id)
);

INSERT INTO product1 VALUES (100, "Nokia"),
(200, "Apple"),
(300, "Samsung");

INSERT INTO sales1 VALUES (1, 100, 2008, 10, 5000),
(2, 100, 2009, 12, 5000),
(7, 200, 2011, 15, 9000);

SELECT
    product_id,
    year as first_year,
    quantity,
    price
FROM sales1
WHERE (product_id, year) IN (SELECT product_id, min(year) as year FROM sales1 GROUP BY product_id);

/*
596
*/

CREATE TABLE courses(
    student VARCHAR(64),
    class VARCHAR(64),
    PRIMARY KEY(student, class)
);

INSERT INTO courses VALUES ("A", "Math"),
("B", "English"),
("C", "Math"),
("D", "Biology"),
("E", "Math"),
("F", "Computer"),
("G", "Math"),
("H", "Math"),
("I", "Math");

SELECT
    class
FROM courses
GROUP BY class
HAVING count(*) > 5;

/*
1729
*/

CREATE TABLE followers(
    user_id INT,
    follower_id INT,
    PRIMARY KEY(user_id, follower_id)
);

INSERT INTO followers VALUES(0, 1),
(1, 0),
(2, 0),
(2, 1);

SELECT
    user_id,
    count(*) AS followers_count
FROM followers
GROUP BY user_id
ORDER BY user_id;

/*
619
*/

CREATE TABLE myNumbers(
    num INT
);

INSERT INTO myNumbers VALUES(8),
(8),
(3),
(3),
(1),
(4),
(5),
(6);

WITH
unique_num AS (SELECT num FROM myNumbers GROUP BY num HAVING count(*) = 1)
SELECT
    max(num) AS num
FROM unique_num;

/*
1045
*/

CREATE TABLE product2(
    product_key INT,
    PRIMARY KEY(product_key)
);

CREATE TABLE customer2(
    customer_id INT NOT NULL,
    product_key INT,
    FOREIGN KEY(product_key) REFERENCES product2(product_key)
);

INSERT INTO product2 VALUES(5),
(6);

INSERT INTO customer2 VALUES(1, 5),
(2, 6),
(3, 5),
(3, 6),
(1, 6);

SELECT
    customer_id
FROM customer2
GROUP BY customer_id
HAVING sum(DISTINCT product_key) = (SELECT sum(product_key) FROM product2);

/*
1731
*/

CREATE TABLE employees2(
    employee_id INT,
    name VARCHAR(64),
    reports_to INT,
    age INT,
    PRIMARY KEY(employee_id)
);

INSERT INTO employees2 VALUES (9, "Hercy", null, 43),
(6, "Alice", 9, 41),
(4, "Bob", 9, 36),
(2, "Wiston", null, 37);

SELECT
    e1.employee_id,
    e1.name,
    count(*) AS reports_count,
    ROUND(AVG(e2.age), 0) AS average_age
FROM employees2 e1
JOIN employees2 e2
ON e1.employee_id = e2.reports_to
GROUP BY employee_id
ORDER BY employee_id;


/*
1789
*/

CREATE TABLE employee3(
    employee_id INT,
    department_id INT,
    primary_flag ENUM('Y', 'N'),
    PRIMARY KEY(employee_id, department_id)
);

INSERT INTO employee3 VALUES(1, 1, "N"),
(2, 1, "Y"),
(2, 2, "N"),
(3, 3, "N"),
(4, 2, "N"),
(4, 3, "Y"),
(4, 4, "N");

SELECT
    employee_id,
    department_id
FROM employee3
WHERE primary_flag = "Y"
GROUP BY employee_id
UNION
SELECT
    employee_id,
    department_id
FROM employee3
GROUP BY (employee_id)
HAVING count(employee_id) = 1;

/*
610
*/

CREATE TABLE triangle(
    x INT,
    y INT,
    z INT,
    PRIMARY KEY(x, y, z)
);

INSERT INTO triangle VALUES(13, 15, 30),
(10, 20, 15);

SELECT
    x,
    y,
    z,
    if((x + y + z - GREATEST(x, y, z)) > GREATEST(x, y, z), "Yes", "No") AS triangle
FROM triangle;

/*
180
*/

CREATE TABLE logs(
    id INT,
    num VARCHAR(64),
    PRIMARY KEY(id)
);

INSERT INTO logs VALUES(1, 1),
(2, 1),
(3, 1),
(4, 2),
(5, 1),
(6, 2),
(7, 2);

SELECT DISTINCT
    l1.num AS consecutiveNums
  FROM logs l1, logs l2, logs l3
  WHERE l2.id - l1.id = 1 AND l3.id - l2.id = 1 AND l1.num = l2.num AND l3.num = l2.num;

/*
1164
*/

CREATE TABLE products3(
    product_id INT,
    new_price INT,
    change_date DATE,
    PRIMARY KEY(product_id, change_date)
);

INSERT INTO products3 VALUES(1, 20, "2019-08-14"),
(2, 50, "2019-08-14"),
(1, 30, "2019-08-15"),
(1, 35, "2019-08-16"),
(2, 65, "2019-08-17"),
(3, 20, "2019-08-18");

SELECT
    p.product_id,
    p.new_price AS price
FROM products3 p
JOIN
    (SELECT
        product_id,
        MAX(change_date) as max_date
    FROM products3
    WHERE change_date <= '2019-08-16'
    GROUP BY product_id
    ) AS mp
ON p.product_id = mp.product_id AND p.change_date = mp.max_date
UNION
SELECT
    product_id,
    10 AS price
FROM products3
GROUP BY product_id
HAVING MIN(change_date) > '2019-08-16';

/*
1204
*/

CREATE TABLE queue(
    person_id INT,
    person_name VARCHAR(64),
    weight INT,
    turn INT,
    PRIMARY KEY(person_id)
);

INSERT INTO queue VALUES(5, "Alice", 250, 1),
(4, "Bob", 175, 5),
(3, "Alex", 350, 2),
(6, "John Cena", 400, 3),
(1, "Winston", 500, 6),
(2, "Marie", 200, 4);

SELECT
     q.person_name
FROM queue q
HAVING (SELECT sum(q2.weight) from queue q2 WHERE q2.turn <= q.turn ORDER BY turn) <= 1000
ORDER BY turn DESC
LIMIT 1;


/*
1907
*/

CREATE TABLE accounts(
    account_id INT,
    income INT,
    PRIMARY KEY(account_id)
);

INSERT INTO accounts VALUES (3, 108939),
(2, 12747),
(8, 87709),
(6, 91796);

SELECT
    "Low Salary" AS category,
    count(*) AS accounts_count
FROM accounts
WHERE income < 20000
UNION
SELECT
    "Average Salary" AS category,
    count(*) AS accounts_count
FROM accounts
WHERE income >= 20000 AND income <= 50000
UNION
SELECT
    "High Salary" AS category,
    count(*) AS accounts_count
FROM accounts
WHERE income > 50000;

/*
1978
*/

CREATE TABLE employees3(
    employee_id INT,
    name VARCHAR(64),
    manager_id INT,
    salary INT,
    PRIMARY KEY(employee_id)
);

INSERT INTO employees3 VALUES(3, "Mila", 9, 60301),
(12, "Antonella", null, 31000),
(13, "Emery", null, 67084),
(1, "Kalel", 11, 21241),
(9, "Mikaela", null, 50937),
(11, "Joziah", 6, 28485);

SELECT
    employee_id
FROM employees3
WHERE salary < 30000 AND manager_id NOT IN (SELECT employee_id FROM employees3)
ORDER BY employee_id;

/*
626
*/

CREATE TABLE seat(
    id INT,
    student VARCHAR(64),
    PRIMARY KEY(id)
);

INSERT INTO seat VALUES (1, "Abbot"),
(2, "Doris"),
(3, "Emerson"),
(4, "Green"),
(5, "Jeames");

SELECT
    if(id + 1 IN (SELECT id FROM seat), id + 1, id) AS id,
    student
FROM seat
WHERE id % 2 = 1
UNION
SELECT
    id - 1 AS id,
    student
FROM seat
WHERE id % 2 = 0
ORDER BY id;

/*
1341
*/

CREATE TABLE movies(
    movie_id INT,
    title VARCHAR(64),
    PRIMARY KEY(movie_id)
);

CREATE TABLE users2(
    user_id INT,
    name VARCHAR(64),
    PRIMARY KEY(user_id)
);

CREATE TABLE movieRating(
    movie_id INT,
    user_id INT,
    rating INT,
    created_at DATE,
    PRIMARY KEY(movie_id, user_id)
);

INSERT INTO movies VALUES(1, "Avengers"),
(2, "Frozen 2"),
(3, "Joker");

INSERT INTO users2 VALUES(1, "Daniel"),
(2, "Monica"),
(3, "Maria"),
(4, "James");

INSERT INTO movieRating VALUES(1, 1, 3, "2020-01-12"),
(1, 2, 4, "2020-02-11"),
(1, 3, 2, "2020-02-12"),
(1, 4, 1, "2020-01-01"),
(2, 1, 5, "2020-02-17"),
(2, 2, 2, "2020-02-01"),
(2, 3, 2, "2020-03-01"),
(3, 1, 3, "2020-02-22"),
(3, 2, 4, "2020-02-25");

(SELECT
    u.name AS results
FROM users2 u
JOIN movieRating m
ON u.user_id = m.user_id
GROUP BY u.user_id
ORDER BY count(m.user_id) DESC, u.name
LIMIT 1)
UNION ALL
(SELECT
    m.title AS results
FROM movies m
JOIN movieRating r
ON m.movie_id = r.movie_id
WHERE YEAR(created_at) = "2020" AND MONTH(created_at) = "2"
GROUP BY r.movie_id
ORDER BY AVG(rating) DESC, m.title
LIMIT 1);

/*
1321
*/

CREATE TABLE customer3(
    customer_id INT,
    name VARCHAR(64),
    visited_on DATE,
    amount INT,
    PRIMARY KEY(customer_id, visited_on)
);

INSERT INTO customer3 VALUES (1, "Jhon", "2019-01-01", 100),
(2, "Daniel", "2019-01-02", 110),
(3, "Jade", "2019-01-03", 120),
(4, "Khaled", "2019-01-04", 130),
(5, "Winston", "2019-01-05", 110),
(6, "Elvis", "2019-01-06", 140),
(7, "Anna", "2019-01-07", 150),
(8, "Maria", "2019-01-08", 80),
(9, "Jaze", "2019-01-09", 110),
(1, "Jhon", "2019-01-10", 130),
(3, "Jade", "2019-01-10", 150);

SELECT
    c.visited_on,
    (SELECT SUM(amount) FROM customer3 WHERE visited_on BETWEEN DATE_SUB(c.visited_on, INTERVAL 6 DAY) AND c.visited_on) AS amount,
    round((SELECT SUM(amount) FROM customer3 WHERE visited_on BETWEEN DATE_SUB(c.visited_on, INTERVAL 6 DAY) AND c.visited_on) / 7, 2) AS average_amount
FROM customer3 c
WHERE visited_on - INTERVAL 6 DAY IN (SELECT visited_on FROM customer3)
GROUP BY visited_on
ORDER BY visited_on;

/*
602
*/

CREATE TABLE requestAccepted(
    requester_id INT,
    accepter_id INT,
    accept_date DATE,
    PRIMARY KEY(requester_id, accepter_id)
);

INSERT INTO requestAccepted VALUES (1, 2, "2016/06/03"),
(1, 3, "2016/06/08"),
(2, 3, "2016/06/08"),
(3, 4, "2016/06/09");

(SELECT
    accepter_id AS id,
    count(*) + (SELECT count(requester_id) FROM requestAccepted WHERE requester_id = r.accepter_id) AS num
FROM requestAccepted r
GROUP BY accepter_id
ORDER BY num DESC
LIMIT 1)
UNION
(SELECT
    requester_id AS id,
    count(*) + (SELECT count(accepter_id) FROM requestAccepted WHERE accepter_id = r.requester_id) AS num
FROM requestAccepted r
GROUP BY requester_id
ORDER BY num DESC
LIMIT 1)
ORDER BY num DESC
LIMIT 1;

/*
585
*/

CREATE TABLE insurance(
    pid INT,
    tiv_2015 FLOAT,
    tiv_2016 FLOAT,
    lat FLOAT,
    lon FLOAT,
    PRIMARY KEY(pid)
);

INSERT INTO insurance VALUES(1, 10, 5, 10, 10),
(2, 20, 20, 20, 20),
(3, 10, 30, 20, 20),
(4, 10, 40, 40, 40);

SELECT
    round(sum(tiv_2016), 2) AS tiv_2016
FROM insurance
WHERE tiv_2015 IN (SELECT tiv_2015 FROM insurance GROUP BY tiv_2015 HAVING count(*) > 1) AND concat(lat, lon) IN (SELECT DISTINCT concat(lat, lon) FROM insurance GROUP BY(concat(lat, lon)) HAVING count(*) = 1);

SELECT DISTINCT concat(lat, lon) FROM insurance GROUP BY(concat(lat, lon)) HAVING count(*) = 1;

/*
185
*/

CREATE TABLE department(
    id INT,
    name VARCHAR(64),
    PRIMARY KEY(id)
);

CREATE TABLE employee4(
    id INT,
    name VARCHAR(64),
    salary INT,
    departmentId INT,
    PRIMARY KEY(id),
    FOREIGN KEY(departmentId) REFERENCES department(id)
);

INSERT INTO department VALUES (1, "IT"),
(2, "Sales");

INSERT INTO employee4 VALUES(1, "Joe", 85000, 1),
(2, "Henry", 80000, 2),
(3, "Sam", 60000, 2),
(4, "Max", 90000, 1),
(5, "Janet", 69000, 1),
(6, "Randy", 85000, 1),
(7, "Will", 70000, 1);

SELECT
    department,
    employee,
    salary
FROM (SELECT d.name AS department,
            e.name AS employee,
            d.id,
            e.salary AS salary,
            dense_rank() OVER (PARTITION BY e.departmentId ORDER BY e.salary DESC) AS 'ranking'
            FROM employee4 e
            LEFT JOIN department d
            ON d.id = e.departmentId) r
WHERE r.ranking <= 3;

/*
1667
*/

CREATE TABLE users3(
     user_id INT,
     name VARCHAR(64),
     PRIMARY KEY( user_id)
);

INSERT INTO users3 VALUES(1, "aLice"),
(2, "bOB");

SELECT user_id,
CONCAT(UCASE(LEFT(name, 1)), LCASE(SUBSTRING(name, 2))) AS name
FROM users3
ORDER BY user_id;

/*
1527
*/

CREATE TABLE patients(
    patient_id INT,
    patient_name VARCHAR(64),
    conditions VARCHAR(64),
    PRIMARY KEY(patient_id)
);

INSERT INTO patients VALUES(1, "Daniel", "YFEV COUGH"),
(2, "Alice", ""),
(3, "Bob", "DIAB100 MYOP"),
(4, "George", "ACNE DIAB100"),
(5, "Alain", "DIAB201");

SELECT patient_id,
patient_name,
conditions
FROM Patients
WHERE conditions like "DIAB1%" or conditions like "% DIAB1%";

/*
196
*/

CREATE TABLE person(
    id INT,
    email VARCHAR(64),
    PRIMARY KEY(id)
);

INSERT INTO person VALUES(1, "john@example.com"),
(2, "bob@example.com"),
(3, "john@example.com");

SELECT
    min(id) as id,
    email
FROM person
GROUP BY email;

/*
176
*/

CREATE TABLE employee5(
    id INT,
    salary INT,
    PRIMARY KEY(id)
);

INSERT INTO employee5 VALUES(1, 100),
(2, 200),
(3, 300);

SELECT
CASE
WHEN COUNT(salary) = 1 THEN null
WHEN (SELECT salary FROM employee5 GROUP BY salary ORDER BY salary DESC limit 1, 1) IS NULL THEN null
ELSE (SELECT salary FROM employee5 GROUP BY salary ORDER BY salary DESC limit 1, 1)
END AS SecondHighestSalary
FROM employee5;

/*
1484
*/

CREATE TABLE activities(
    sell_date DATE,
    product VARCHAR(64)
);

INSERT INTO activities VALUES ("2020-05-30", "Headphone"),
("2020-06-01", "Pencil"),
("2020-06-02", "Mask"),
("2020-05-30", "Basketball"),
("2020-06-01", "Bible"),
("2020-06-02", "Mask"),
("2020-05-30", "T-Shirt");

SELECT
sell_date,
count(DISTINCT product) AS num_sold,
GROUP_CONCAT(DISTINCT product ORDER BY product ASC SEPARATOR ',') AS products
FROM Activities
GROUP BY sell_date;

/*
1327
*/

CREATE TABLE products1(
    product_id INT,
    product_name VARCHAR(64),
    product_category VARCHAR(64),
    PRIMARY KEY(product_id)
);

CREATE TABLE orders(
    product_id INT,
    order_date DATE,
    unit INT,
    FOREIGN KEY(product_id) REFERENCES products1(product_id)
);

INSERT INTO products1 VALUES(1, "Leetcode Solutions", "Book"),
(2, "Jewels of Stringology", "Book"),
(3, "HP", "Laptop"),
(4, "Lenovo", "Laptop"),
(5, "Leetcode Kit", "T-shirt");

INSERT INTO orders VALUES (1, "2020-02-05", 60),
(1, "2020-02-10", 70),
(2, "2020-01-18", 30),
(2, "2020-02-11", 80),
(3, "2020-02-17", 2),
(3, "2020-02-24", 3),
(4, "2020-03-01", 20),
(4, "2020-03-04", 30),
(4, "2020-03-04", 60),
(5, "2020-02-25", 50),
(5, "2020-02-27", 50),
(5, "2020-03-01", 50);

SELECT
    p.product_name,
    sum(o.unit) as unit
FROM orders o
JOIN products1 p
ON o.product_id = p.product_id
WHERE o.order_date BETWEEN "2020-02-01" AND "2020-02-29"
GROUP BY o.product_id
HAVING sum(o.unit) >= 100;

/*
1517
*/

CREATE TABLE users4(
    user_id INT,
    name VARCHAR(64),
    mail VARCHAR(64),
    PRIMARY KEY(user_id)
);

INSERT INTO users4 VALUES(1, "Winston", "winston@leetcode.com"),
(2, "Jonathan", "jonathanisgreat"),
(3, "Annabelle", "bella-@leetcode.com"),
(4, "Sally", "sally.come@leetcode.com"),
(5, "Marwan", "quarz#2020@leetcode.com"),
(6, "David", "david69@gmail.com"),
(7, "Shapiro", ".shapo@leetcode.com");

SELECT
    user_id,
    name,
    mail
FROM users4
WHERE mail REGEXP '^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode\\.com';
